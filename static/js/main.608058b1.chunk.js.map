{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cardsArray","robots","map","robot","i","src_Card","key","username","SearchBox","searchField","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","tachyons","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.608058b1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n    \n    return (\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    const cardsArray = robots.map((robot, i) => {\n        return (<Card key={robot.id} id={robot.id}\n                username={robot.username}\n                name={robot.name}\n                email={robot.email}\n            />)\n        })\n\n    return (\n        <div>\n        {cardsArray}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"search\"\n                placeholder=\"Search robots...\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","export const robots = [\n    {\n        id: 1,\n        name: 'Leanne Graham',\n        username: 'Bret',\n        email: 'sincere@april.biz'\n    },\n    {\n        id: 2,\n        name: 'Ervin Howell',\n        username: 'Antonette',\n        email: 'shanna@mellisa.tv'\n    },\n    {\n        id: 3,\n        name: 'Clementine Bauch',\n        username: 'Samantha',\n        email: 'nathan@yesenia.net'\n    },\n    {\n        id: 4,\n        name: 'Patricia Lebsack',\n        username: 'Karianne',\n        email: 'julianne.oconner@kory.org'\n    },\n    {\n        id: 5,\n        name: 'Chelsey Dietrich',\n        username: 'Kanren',\n        email: 'lucio_hettinger@annie.ca'\n    },\n    {\n        id: 6,\n        name: 'Mrs. Dennis Schulist',\n        username: 'Leopoldo_Corkery',\n        email: 'karley_bach@jasper.info'\n    },\n    {\n        id: 7,\n        name: 'Kurtis Weissnat',\n        username: 'Elwyn.Skiles',\n        email: 'telly.hoeger@billy.biz'\n    },\n    {\n        id: 8,\n        name: 'Nicholas Runolfsdottir V',\n        username: 'Maxime_Nienow',\n        email: 'sherwood@rosamond.me'\n    },\n    {\n        id: 9,\n        name: 'Glenna Reichert',\n        username: 'Delphine',\n        email: 'chaim_mcdermott@dana.io'\n    },\n    {\n        id: 10,\n        name: 'Clementina DuBuque',\n        username: 'Moriah.Stanton',\n        email: 'rey.padberg@karina.biz'\n    }\n]","import React, { Component } from 'react'\nimport CardList from './CardList'\nimport SearchBox from './SearchBox'\nimport { robots } from './robots'\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            robots,\n            searchField: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchField: event.target.value })\n    }\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchField)\n        })\n\n        return (\n            <div className=\"tc\">\n                <h1 className=\"f1\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <CardList robots={filteredRobots} />\n            </div>\n        )\n    }\n}\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport tachyons from 'tachyons'\n\n\nwindow.tachyons = tachyons\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}